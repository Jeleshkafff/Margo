import tkinter as tk
from tkinter import scrolledtext
from threading import Thread
import pyttsx3
import speech_recognition as sr
from fuzzywuzzy import fuzz
import datetime
from random import choice
import webbrowser
import configparser
from queue import Queue

class Assistant:
    def __init__(self):
        self.settings = configparser.ConfigParser()
        self.settings.read('settings.ini')

        self.root = tk.Tk()
        self.root.title("Voice Assistant")
        self.root.geometry("600x400")
        self.root.configure(bg="#212121")


        self.message_frame = tk.Frame(self.root, bg="#212121")
        self.message_frame.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)


        self.text_area = tk.Text(self.message_frame, wrap=tk.WORD, width=60, height=15,
                                 bg="#303030", fg="white", font=("Comfortaa", 12))
        self.text_area.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

        self.text_area.insert(tk.END, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –º–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—Ä–≥–æ, —è –≤–∞—à –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫\n", "message")
        self.text_area.insert(tk.END, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ\n", "message")
        self.text_area.insert(tk.END, "–ü–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Ä–µ–º—è, –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω—É–∂–Ω—ã–µ –≤–∞–º —Å–æ—Ü —Å–µ—Ç–∏, –∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –≤ –≥—É–≥–ª\n", "message")
        self.text_area.insert(tk.END, "–ù–∞–¥–µ—é—Å—å —è —Å–º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å üíú\n", "message")
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ–≥–∞ "message" –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.text_area.tag_configure("message", justify="center")

        self.engine = pyttsx3.init()
        voices = self.engine.getProperty('voices')
        for voice in voices:
            selected_voice = 'VoiceName'
            if selected_voice in voice.name:
                self.engine.setProperty('voice', voice.id)
                break
        self.r = sr.Recognizer()

        self.cmds = {
            ('—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è', '—Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', "–≤—Ä–µ–º—è"): self.time,
            ('–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π'): self.hello,
            ('–ø–æ–∫–∞', '–ø—Ä–æ—â–∞–π'): self.quit,
            ('–º–∞—Ä–≥–æ', '–º–∞—Ä–≥–æ—à–∫–∞', '—Å–æ–ª–Ω—Ü–µ', '—Å–æ–ª–Ω—ã—à–∫–æ', '–º–æ—ë —Å–æ–ª–Ω—ã—à–∫–æ', "—Å–æ–ª–Ω—Ü–µ –º–æ–µ"): self.name,
        }

        self.ndels = ['–ª–∞–¥–Ω–æ', '–Ω–µ –º–æ–≥–ª–∞ –±—ã —Ç—ã', '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞', '—Å–µ–π—á–∞—Å']

        self.commands = [
            '—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è', '—Å–µ–π—á–∞—Å –≤—Ä–µ–º–µ–Ω–∏', "–≤—Ä–µ–º—è", '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å',
            '–æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä', '–æ—Ç–∫—Ä–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–∑–∞–ø—É—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä',
            '–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π',
            '–ø–æ–∫–∞', '–ø—Ä–æ—â–∞–π',
        ]

        self.speech_queue = Queue()

    def cleaner(self, text):
        for i in self.ndels:
            text = text.replace(i, '').strip()
            text = text.replace('  ', ' ').strip()

        ans = text

        for command in self.commands:
            similarity_ratio = fuzz.ratio(text, command)
            if similarity_ratio > 70 and similarity_ratio > getattr(self, 'j', 0):
                ans = command
                self.j = similarity_ratio

        return ans

    def recognizer(self):
        while True:
            text = self.cleaner(self.listen())
            if text != "":
                self.update_chat("–í—ã: " + text + "\n", sender="user")
                self.update_chat(" " + "\n", sender="user")

            if text.startswith(('–æ—Ç–∫—Ä–æ–π', '–∑–∞–ø—É—Å—Ç–∏', '–∑–∞–π–¥–∏', '–∑–∞–π–¥–∏ –Ω–∞', "–≤–∫–ª—é—á–∏")):
                self.opener(text)

            for tasks, function in self.cmds.items():
                for task in tasks:
                    if fuzz.ratio(task, text) >= 80:
                        function()
                        break

            question_keywords = ['—á—Ç–æ', '–∫–∞–∫', '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '–∫–∞–∫–∞—è', '–∫–∞–∫–∏–µ']
            if any(keyword in text for keyword in question_keywords):
                self.talk("–î–∞–π—Ç–µ –º–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
                search_query = text
                search_url = "https://www.google.com/search?q=" + search_query
                webbrowser.open(search_url)

    def time(self):
        now = datetime.datetime.now()
        self.talk("–°–µ–π—á–∞—Å " + str(now.hour) + ":" + str(now.minute))

    def opener(self, task):
        links = {
            ('youtube', '—é—Ç—É–±', '—é—Ç—é–±'): 'https://youtube.com/',
            ('–≤–∫', '–≤–∫–æ–Ω—Ç–∞–∫—Ç–µ', '–∫–æ–Ω—Ç–∞–∫—Ç', 'vk'): 'https://vk.com/feed',
            ('–±—Ä–∞—É–∑–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', 'browser'): 'https://google.com/',
            ('—Ç–≥', '—Ç–µ–ª–µ–≥—Ä–∞–º', 'telegram'): 'https://t.me/jeleshkaffff',
            ('–º—É–∑—ã–∫—É','–ø–µ—Å–Ω—é','–ø–µ—Å–µ–Ω–∫—É'):choice(['https://www.youtube.com/watch?v=t-Ku3te9lmE&list=PL6c4Rm7WPCMb2jPCUMb3B52UYP59foCyC&index=2&ab_channel=BiaMK', 'https://www.youtube.com/watch?v=L5uV3gmOH9g&ab_channel=BMTHOfficialVEVO', 'https://www.youtube.com/watch?v=jivvlR25Isc&ab_channel=Sen', 'https://www.youtube.com/watch?v=d_HlPboLRL8&ab_channel=iamAURORAVEVO'])
        }

        if '–∏' in task:
            task = task.replace('–∏', '').replace('  ', ' ')
        double_task = task.split()

        for i in range(len(double_task)):
            for vals, link in links.items():
                if any(fuzz.ratio(word, double_task[i]) > 75 for word in vals):
                    webbrowser.open(link)
                    self.talk('–û—Ç–∫—Ä—ã–≤–∞—é ' + double_task[i])
                    return

    def cfile(self):
        try:
            cfr = self.settings['SETTINGS']['fr']
            if cfr != 1:
                with open('settings.ini', 'w', encoding='UTF-8') as file:
                    file.write('[SETTINGS]\ncountry = RU\nplace = Moskov\nfr = 1')
        except Exception as e:
            print('–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞!', e)
            with open('settings.ini', 'w', encoding='UTF-8') as file:
                file.write('[SETTINGS]\ncountry = RU\nplace = Moskov\nfr = 1')

    def quit(self):
        self.talk(choice(['–ù–∞–¥–µ—é—Å—å –º—ã —Å–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è', '–†–∞–¥–∞ –±—ã–ª–∞ –ø–æ–º–æ—á—å', '–ü–æ–∫–∞ –ø–æ–∫–∞', '–Ø –æ—Ç–∫–ª—é—á–∞—é—Å—å']))
        self.engine.stop()
        self.root.destroy()

    def hello(self):
        self.talk(choice(['–ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', '–ó–¥—Ä–∞—Å—Ç–≤—É–π—Ç–µ', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é']))

    def name(self):
        self.talk(choice(['–î–∞, —è', '–ß—Ç–æ?', '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ?']))

    def talk(self, text):
        self.speech_queue.put(text)

    def speech_synthesis(self):
        while True:
            try:
                text = self.speech_queue.get()
                self.update_chat("–ú–∞—Ä–≥–æ: " + text + "\n", sender="bot")
                self.update_chat(" " + "\n", sender="bot")
                self.engine.say(text)
                self.engine.runAndWait()
                self.engine.stop()  # –û—Å–≤–æ–±–æ–¥–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            except Exception as e:
                print("Error in speech synthesis:", e)

    def listen(self):
        with sr.Microphone() as source:
            self.text_area.see(tk.END)
            self.r.adjust_for_ambient_noise(source)
            audio = self.r.listen(source)
            try:
                return self.r.recognize_google(audio, language="ru-RU").lower()
            except Exception as e:
                print(e)
                return ""

    def update_chat(self, message, sender):
        self.text_area.configure(state='normal')  # Enable text entry
        if sender == "user":
            self.text_area.tag_configure("user", justify="right", foreground="white")
            self.text_area.insert(tk.END, message, "user")
        elif sender == "bot":
            self.text_area.tag_configure("bot", justify="left", foreground="#E6BCFF")
            self.text_area.insert(tk.END, message, "bot")
        self.text_area.see(tk.END)
        self.text_area.configure(state='disabled')  # Disable text entry

    def start(self):
        self.cfile()
        t = Thread(target=self.recognizer)
        t.daemon = True
        t.start()
        t2 = Thread(target=self.speech_synthesis)
        t2.daemon = True
        t2.start()
        self.root.mainloop()

Assistant().start()
